{"version":3,"sources":["Component/Header/TodoApp.js","Component/Main/TodoItem.js","Component/Main/TodoList.js","Component/Footer/TodosFilter.js","App.js","index.js"],"names":["TodoApp","onAdd","todos","useState","title","setTitle","className","onSubmit","event","preventDefault","newTodo","id","Date","completed","type","placeholder","value","onChange","target","defaultProps","TodoItem","props","isCompleted","setIsCompleted","onEditStatus","setOnEditStatus","todoText","setTodoText","deleteTodo","completeTodo","itemId","itemTitle","itemCompleted","onChangeTitle","onBlur","length","trim","classNames","view","editing","checked","onDoubleClick","onClick","trimLeft","onKeyDown","key","TodoList","statusCompleteAllTodo","setStatusCompleteAllTodo","items","completeAllTodo","isAnyTodo","hidden","htmlFor","map","item","handleFilter","callFilter","criteria","TodoFilter","todosCompletedCount","settodosCompletedCount","isAnyCompleted","setIsAnyCompleted","filter","onFilter","onRemoveCompleted","filterCompleted","todo","useEffect","filterIsAnyCompleted","some","footer","href","selected","App","setTodos","setItems","setFilter","setIsAnyTodo","localStorage","JSON","parse","getItem","setItem","stringify","isAnyTodoCheck","prevTodos","removeTodoID","isCopleted","comandAll","newTitle","comand","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.87492058.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nexport const TodoApp = ({ onAdd, todos }) => {\n  const [title, setTitle] = useState('');\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    onAdd(newTodo);\n\n    setTitle('');\n  };\n\n  return (\n    <div>\n      <form\n        className=\"addTodo\"\n        onSubmit={addTodo}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n      </form>\n    </div>\n  );\n};\n\nTodoApp.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoApp.defaultProps = {\n  todos: [],\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nexport const TodoItem = (props) => {\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [onEditStatus, setOnEditStatus] = useState(false);\n  const [todoText, setTodoText] = useState('');\n\n  const {\n    deleteTodo,\n    completeTodo,\n    itemId,\n    itemTitle,\n    itemCompleted,\n    onChangeTitle,\n  } = props;\n\n  const onBlur = () => {\n    if (todoText.length > 0) {\n      const newTodoTitle = {\n        id: itemId,\n        title: todoText,\n      };\n\n      onChangeTitle(newTodoTitle);\n\n      setOnEditStatus(false);\n      setTodoText('');\n    } else {\n      setTodoText(todoText.trim());\n\n      setOnEditStatus(false);\n    }\n  };\n\n  const onKeyPush = (key) => {\n    if (key === 'Enter') {\n      onBlur();\n    } else if (key === 'Escape') {\n      setTodoText(itemTitle);\n      setOnEditStatus(false);\n    }\n  };\n\n  const soldCheckbox = ({ target: { checked } }) => {\n    setIsCompleted(checked);\n\n    completeTodo(itemId);\n  };\n\n  return (\n\n    <li\n      className={classNames(\n        { view: !itemCompleted && !onEditStatus },\n        { completed: itemCompleted && !onEditStatus },\n        { editing: onEditStatus && !itemCompleted },\n      )}\n    >\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={isCompleted}\n          onChange={soldCheckbox}\n        />\n\n        {!onEditStatus && (\n          <label\n            onDoubleClick={() => setOnEditStatus(true)}\n          >\n            {itemTitle}\n          </label>\n        )}\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          value={itemId}\n          onClick={event => deleteTodo(event.target.value)}\n        />\n      </div>\n\n      {onEditStatus && (\n        <input\n          type=\"text\"\n          className=\"edit\"\n          value={todoText}\n          onChange={event => setTodoText(event.target.value.trimLeft())}\n          onKeyDown={event => onKeyPush(event.key)}\n          onBlur={onBlur}\n        />\n      )}\n    </li>\n  );\n};\n\nTodoItem.propTypes = {\n  deleteTodo: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  onChangeTitle: PropTypes.func.isRequired,\n  itemId: PropTypes.number.isRequired,\n  itemTitle: PropTypes.string.isRequired,\n  itemCompleted: PropTypes.bool.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { TodoItem } from './TodoItem';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nexport const TodoList = (props) => {\n  const [statusCompleteAllTodo, setStatusCompleteAllTodo] = useState(true);\n\n  const {\n    items,\n    deleteTodo,\n    completeTodo,\n    completeAllTodo,\n    isAnyTodo,\n    onChangeTitle,\n  } = props;\n\n  const handleClick = () => {\n    if (statusCompleteAllTodo) {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(false);\n    } else {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(true);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className={classNames({ 'toggle-all': true, hidden: !isAnyTodo })}\n        onClick={handleClick}\n      />\n      <label htmlFor=\"toggle-all\">\n        Mark all as complete\n      </label>\n\n      <ul className=\"todo-list\">\n        {items.map(item => (\n          <TodoItem\n            key={item.id}\n            deleteTodo={deleteTodo}\n            completeTodo={completeTodo}\n            itemId={item.id}\n            itemTitle={item.title}\n            itemCompleted={item.completed}\n            onChangeTitle={onChangeTitle}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  onChangeTitle: PropTypes.func.isRequired,\n  isAnyTodo: PropTypes.bool.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  completeAllTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nconst handleFilter = (event, callFilter, criteria) => {\n  event.preventDefault();\n  callFilter(criteria);\n};\n\nexport const TodoFilter = (props) => {\n  const [todosCompletedCount, settodosCompletedCount] = useState(0);\n  const [isAnyCompleted, setIsAnyCompleted] = useState(0);\n\n  const {\n    todos,\n    filter,\n    onFilter,\n    onRemoveCompleted,\n    isAnyTodo,\n  } = props;\n\n  const filterCompleted = todos\n    .filter(todo => todo.completed === false)\n    .length;\n\n  useEffect(() => {\n    settodosCompletedCount(filterCompleted);\n  }, [filterCompleted]);\n\n  const filterIsAnyCompleted = todos\n    .some(todo => todo.completed === true);\n\n  useEffect(() => {\n    setIsAnyCompleted(filterIsAnyCompleted);\n  }, [filterIsAnyCompleted]);\n\n  return (\n\n    <footer className={classNames({ footer: true, hidden: !isAnyTodo })}>\n      <span className=\"todo-count\">\n        {`${todosCompletedCount}  items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'all') })}\n            onClick={event => handleFilter(event, onFilter, 'all')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'active') })}\n            onClick={event => handleFilter(event, onFilter, 'active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'completed') })}\n            onClick={event => handleFilter(event, onFilter, 'completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {isAnyCompleted && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onRemoveCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFilter.propTypes = {\n  isAnyTodo: PropTypes.bool.isRequired,\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoFilter.defaultProps = {\n  todos: [],\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoApp } from './Component/Header/TodoApp';\nimport { TodoList } from './Component/Main/TodoList';\nimport { TodoFilter } from './Component/Footer/TodosFilter';\nimport './styles/filters.css';\nimport './styles/index.css';\nimport './styles/todo-list.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [items, setItems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [isAnyTodo, setIsAnyTodo] = useState(false);\n\n  useEffect(() => {\n    if (localStorage.todos) {\n      setTodos(JSON.parse(localStorage.getItem('todos') || '[]'));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  const isAnyTodoCheck = todos.length > 0;\n\n  useEffect(() => {\n    setIsAnyTodo(isAnyTodoCheck);\n  }, [isAnyTodoCheck]);\n\n  useEffect(() => {\n    setItems([...todos]);\n  }, [todos]);\n\n  const onFilter = (comand) => {\n    setFilter(comand);\n    switch (comand) {\n      case 'active':\n\n        return setItems(todos.filter(todo => todo.completed === false));\n\n      case 'completed':\n\n        return setItems(todos.filter(todo => todo.completed === true));\n\n      default:\n\n        return setItems([...todos]);\n    }\n  };\n\n  const onRemoveCompleted = () => {\n    setTodos(todos.filter(todo => todo.completed === false));\n  };\n\n  const addTodo = (newTodo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  const deleteTodo = (removeTodoID) => {\n    setTodos(todos.filter(todo => todo.id !== +removeTodoID));\n  };\n\n  const completeTodo = (isCopleted) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === isCopleted) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const completeAllTodo = (comandAll) => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: comandAll,\n    })));\n  };\n\n  const onChangeTitle = (newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === newTitle.id) {\n        return {\n          ...todo,\n          title: newTitle.title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp\n          onAdd={addTodo}\n          todos={todos}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          items={items}\n          deleteTodo={deleteTodo}\n          completeTodo={completeTodo}\n          completeAllTodo={completeAllTodo}\n          isAnyTodo={isAnyTodo}\n          onChangeTitle={onChangeTitle}\n        />\n      </section>\n\n      <TodoFilter\n        todos={todos}\n        filter={filter}\n        onFilter={onFilter}\n        onRemoveCompleted={onRemoveCompleted}\n        isAnyTodo={isAnyTodo}\n      />\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}