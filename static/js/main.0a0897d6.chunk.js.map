{"version":3,"sources":["Component/Header/TodoApp.js","Component/Main/TodoItem.js","Component/Main/TodoList.js","Component/Footer/TodosFilter.js","App.js","index.js"],"names":["TodoApp","onAdd","useState","title","setTitle","className","onSubmit","event","preventDefault","newTodo","id","Date","completed","type","placeholder","value","onChange","target","TodoItem","props","isCompleted","setIsCompleted","newTitle","setNewTitle","editStatus","setEditStatus","completeTodo","itemId","itemTitle","deleteTodo","itemCompleted","onAddNewTitle","onBlur","classNames","view","editing","checked","onDoubleClick","onClick","onKeyDown","keyPush","key","TodoList","statusCompleteAllTodo","setStatusCompleteAllTodo","items","completeAllTodo","showFotter","hidden","htmlFor","map","item","defaultProps","handleFilter","callFilter","criteria","TodoFilter","todosCompletedCount","settodosCompletedCount","isAnyCompleted","setIsAnyCompleted","todos","filter","onFilter","onRemoveCompleted","filterCompleted","todo","length","useEffect","filterIsAnyCompleted","some","footer","href","selected","App","setTodos","setItems","setFilter","localStorage","JSON","parse","getItem","prevTodos","removeTodoID","isCopleted","comandAll","comand","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a0897d6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/index.css';\n\nexport const TodoApp = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    const newTodo = {\n      id: +new Date(),\n      title,\n      completed: false,\n    };\n\n    onAdd(newTodo);\n\n    setTitle('');\n  };\n\n  return (\n    <div>\n      <form\n        className=\"addTodo\"\n        onSubmit={addTodo}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n      </form>\n    </div>\n  );\n};\n\nTodoApp.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport '../../styles/index.css';\n\nexport const TodoItem = (props) => {\n  const [isCompleted, setIsCompleted] = useState(false);\n  const [newTitle, setNewTitle] = useState('');\n  const [editStatus, setEditStatus] = useState(false);\n\n  const {\n    completeTodo,\n    itemId,\n    itemTitle,\n    deleteTodo,\n    itemCompleted,\n    onAddNewTitle,\n  } = props;\n\n  const soldCheckbox = ({ target: { checked } }) => {\n    setIsCompleted(checked);\n\n    completeTodo(itemId);\n  };\n\n  const onBlur = () => {\n    if (editStatus) {\n      const obj = {\n        id: itemId,\n        title: newTitle,\n      };\n\n      onAddNewTitle(obj);\n\n      setEditStatus(false);\n      setNewTitle('');\n    }\n  };\n\n  const onKeyPush = (keyPush) => {\n    if (keyPush === 'Enter') {\n      onBlur();\n    } else if (keyPush === 'Escape') {\n      onAddNewTitle(itemTitle);\n\n      setEditStatus(false);\n      setNewTitle('');\n    }\n  };\n\n  return (\n    <>\n      <li className={classNames({\n        view: !itemCompleted && !editStatus,\n        completed: itemCompleted && !editStatus,\n        editing: !itemCompleted && editStatus,\n      })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={isCompleted}\n            onChange={soldCheckbox}\n          />\n\n          {!editStatus && (\n            <label\n              onDoubleClick={() => setEditStatus(true)}\n            >\n              {itemTitle}\n            </label>\n          )}\n\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            value={itemId}\n            onClick={event => deleteTodo(event.target.value)}\n          />\n        </div>\n\n        {editStatus && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTitle}\n            onChange={(event => setNewTitle(event.target.value))}\n            onKeyDown={event => onKeyPush(event.key)}\n            onBlur={onBlur}\n          />\n        )}\n      </li>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  onAddNewTitle: PropTypes.func.isRequired,\n  itemCompleted: PropTypes.bool.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  itemId: PropTypes.number.isRequired,\n  itemTitle: PropTypes.string.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nexport const TodoList = (props) => {\n  const [statusCompleteAllTodo, setStatusCompleteAllTodo] = useState(true);\n\n  const {\n    items,\n    deleteTodo,\n    completeTodo,\n    completeAllTodo,\n    showFotter,\n    onAddNewTitle,\n  } = props;\n\n  const handleClick = () => {\n    if (statusCompleteAllTodo) {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(false);\n    } else {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(true);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className={\n          classNames({\n            'toggle-all': showFotter,\n            hidden: !showFotter,\n          })}\n        onClick={handleClick}\n      />\n      {showFotter && (\n        <label htmlFor=\"toggle-all\">\n          Mark all as complete\n        </label>\n      )}\n\n      <ul className=\"todo-list\">\n        {items.map(item => (\n          <TodoItem\n            key={item.id}\n            completeTodo={completeTodo}\n            itemId={item.id}\n            itemTitle={item.title}\n            deleteTodo={deleteTodo}\n            itemCompleted={item.completed}\n            onAddNewTitle={onAddNewTitle}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  onAddNewTitle: PropTypes.func.isRequired,\n  showFotter: PropTypes.bool.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  completeAllTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nconst handleFilter = (event, callFilter, criteria) => {\n  event.preventDefault();\n  callFilter(criteria);\n};\n\nexport const TodoFilter = (props) => {\n  const [todosCompletedCount, settodosCompletedCount] = useState(0);\n  const [isAnyCompleted, setIsAnyCompleted] = useState(0);\n\n  const {\n    todos,\n    filter,\n    onFilter,\n    onRemoveCompleted,\n    showFotter,\n  } = props;\n\n  const filterCompleted = todos\n    .filter(todo => todo.completed === false)\n    .length;\n\n  useEffect(() => {\n    settodosCompletedCount(filterCompleted);\n  }, [filterCompleted]);\n\n  const filterIsAnyCompleted = todos\n    .some(todo => todo.completed === true);\n\n  useEffect(() => {\n    setIsAnyCompleted(filterIsAnyCompleted);\n  }, [filterIsAnyCompleted]);\n\n  return (\n\n    <footer\n      className={\n        classNames({\n          footer: showFotter,\n          hidden: !showFotter,\n        })}\n    >\n      <span className=\"todo-count\">\n        {`${todosCompletedCount}  items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'all') })}\n            onClick={event => handleFilter(event, onFilter, 'all')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'active') })}\n            onClick={event => handleFilter(event, onFilter, 'active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'completed') })}\n            onClick={event => handleFilter(event, onFilter, 'completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {isAnyCompleted && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={onRemoveCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFilter.propTypes = {\n  showFotter: PropTypes.bool.isRequired,\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  onRemoveCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoFilter.defaultProps = {\n  todos: [],\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoApp } from './Component/Header/TodoApp';\nimport { TodoList } from './Component/Main/TodoList';\nimport { TodoFilter } from './Component/Footer/TodosFilter';\nimport './styles/filters.css';\nimport './styles/index.css';\nimport './styles/todo-list.css';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [items, setItems] = useState([]);\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    if (localStorage.todos) {\n      setTodos(JSON.parse(localStorage.getItem('todos') || '[]'));\n    }\n  }, []);\n\n  useEffect(() => {\n    setItems([...todos]);\n  }, [todos]);\n\n  const showFotter = todos.length > 0;\n\n  const onFilter = (comand) => {\n    setFilter(comand);\n    switch (comand) {\n      case 'active':\n\n        return setItems(todos.filter(todo => todo.completed === false));\n\n      case 'completed':\n\n        return setItems(todos.filter(todo => todo.completed === true));\n\n      default:\n\n        return setItems([...todos]);\n    }\n  };\n\n  const onRemoveCompleted = () => {\n    setTodos(todos.filter(todo => todo.completed === false));\n  };\n\n  const addTodo = (newTodo) => {\n    setTodos(prevTodos => [...prevTodos, newTodo]);\n  };\n\n  const deleteTodo = (removeTodoID) => {\n    setTodos(todos.filter(todo => todo.id !== +removeTodoID));\n  };\n\n  const completeTodo = (isCopleted) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === isCopleted) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const completeAllTodo = (comandAll) => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: comandAll,\n    })));\n  };\n\n  const onAddNewTitle = (newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === newTitle.id) {\n        return {\n          ...todo,\n          title: newTitle.title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  return (\n\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <TodoApp\n          onAdd={addTodo}\n          todos={todos}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          items={items}\n          deleteTodo={deleteTodo}\n          completeTodo={completeTodo}\n          completeAllTodo={completeAllTodo}\n          showFotter={showFotter}\n          onAddNewTitle={onAddNewTitle}\n        />\n      </section>\n\n      <TodoFilter\n        todos={todos}\n        filter={filter}\n        onFilter={onFilter}\n        onRemoveCompleted={onRemoveCompleted}\n        showFotter={showFotter}\n      />\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}