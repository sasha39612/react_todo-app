{"version":3,"sources":["Component/Header/TodoApp.js","Component/Main/TodoItem.js","Component/Main/TodoList.js","Component/Footer/TodosFilter.js","Component/API/api.js","Component/API/users.js","Component/API/todos.js","App.js","index.js"],"names":["TodoApp","onAdd","userId","useState","title","setTitle","className","onSubmit","event","preventDefault","length","newTodo","id","Date","completed","type","placeholder","value","onChange","target","TodoItem","props","newTitle","setNewTitle","editStatus","setEditStatus","item","completeTodo","deleteTodo","onAddNewTitle","onBlur","obj","classNames","editing","checked","onDoubleClick","onClick","onKeyDown","keyPush","defaultProps","TodoList","statusCompleteAllTodo","setStatusCompleteAllTodo","items","completeAllTodo","showFotter","hidden","htmlFor","map","key","handleFilter","callFilter","criteria","TodoFilter","todosCompletedCount","settodosCompletedCount","isAnyCompleted","setIsAnyCompleted","todos","filter","onFilter","clearCompleted","filterCompleted","todo","useEffect","filterIsAnyCompleted","some","footer","href","selected","BASE_URL","addUser","url","data","name","username","email","phone","fetch","method","body","JSON","stringify","then","response","ok","json","Error","status","statusText","result","getUserId","userName","a","user","localeCompare","getTodos","addTodo","App","setItems","setFilter","setUserId","setUserName","setTodos","loadTodosFromServer","userID","apiTodos","apiUsers","todoId","removeTodoID","isCopleted","comandAll","comand","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.143c6556.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport '../../styles/index.css';\n\nexport const TodoApp = ({ onAdd, userId }) => {\n  const [title, setTitle] = useState('');\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    if (title.length > 0) {\n      const newTodo = {\n        userId,\n        id: +new Date(),\n        title,\n        completed: false,\n      };\n\n      onAdd(newTodo);\n\n      setTitle('');\n    }\n  };\n\n  return (\n    <div>\n      <form\n        className=\"addTodo\"\n        onSubmit={addTodo}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={event => setTitle(event.target.value)}\n        />\n      </form>\n    </div>\n  );\n};\n\nTodoApp.propTypes = {\n  onAdd: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport '../../styles/index.css';\n\nexport const TodoItem = (props) => {\n  const [newTitle, setNewTitle] = useState('');\n  const [editStatus, setEditStatus] = useState(false);\n\n  const {\n    item,\n    completeTodo,\n    deleteTodo,\n    onAddNewTitle,\n  } = props;\n\n  const onBlur = () => {\n    if (editStatus && (newTitle.length > 0)) {\n      const obj = {\n        id: item.id,\n        title: newTitle,\n      };\n\n      onAddNewTitle(obj);\n\n      setEditStatus(false);\n      setNewTitle('');\n    }\n  };\n\n  const onKeyPush = (keyPush) => {\n    if (keyPush === 'Enter') {\n      onBlur();\n    } else if (keyPush === 'Escape') {\n      onAddNewTitle(item.title);\n\n      setEditStatus(false);\n      setNewTitle('');\n    }\n  };\n\n  return (\n    <>\n      <li className={classNames({\n        completed: item.completed,\n        editing: editStatus,\n      })}\n      >\n        <div className=\"view\">\n          <input\n            type=\"checkbox\"\n            className=\"toggle\"\n            checked={item.completed}\n            onChange={() => completeTodo(item.id)}\n          />\n\n          {!editStatus && (\n            <label\n              onDoubleClick={() => setEditStatus(!editStatus)}\n            >\n              {item.title}\n            </label>\n          )}\n\n          <button\n            type=\"button\"\n            className=\"destroy\"\n            onClick={() => deleteTodo(item.id)}\n          />\n        </div>\n\n        {editStatus && (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={newTitle}\n            onChange={(event => setNewTitle(event.target.value))}\n            onKeyDown={onKeyPush}\n            onBlur={onBlur}\n          />\n        )}\n      </li>\n    </>\n  );\n};\n\nTodoItem.propTypes = {\n  onAddNewTitle: PropTypes.func.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  item: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }),\n};\n\nTodoItem.defaultProps = {\n  item: {},\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { TodoItem } from './TodoItem';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nexport const TodoList = (props) => {\n  const [statusCompleteAllTodo, setStatusCompleteAllTodo] = useState(true);\n\n  const {\n    items,\n    deleteTodo,\n    completeTodo,\n    completeAllTodo,\n    showFotter,\n    onAddNewTitle,\n  } = props;\n\n  const handleClick = () => {\n    if (statusCompleteAllTodo) {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(false);\n    } else {\n      completeAllTodo(statusCompleteAllTodo);\n\n      setStatusCompleteAllTodo(true);\n    }\n  };\n\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className={\n          classNames({\n            'toggle-all': showFotter,\n            hidden: !showFotter,\n          })}\n        onClick={handleClick}\n      />\n      {showFotter && (\n        <label htmlFor=\"toggle-all\">\n          Mark all as complete\n        </label>\n      )}\n\n      <ul className=\"todo-list\">\n        {items.map(item => (\n          <TodoItem\n            key={item.id}\n            completeTodo={completeTodo}\n            item={item}\n            deleteTodo={deleteTodo}\n            onAddNewTitle={onAddNewTitle}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n\nTodoList.propTypes = {\n  onAddNewTitle: PropTypes.func.isRequired,\n  showFotter: PropTypes.bool.isRequired,\n  completeTodo: PropTypes.func.isRequired,\n  completeAllTodo: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoList.defaultProps = {\n  items: [],\n};\n","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport '../../styles/todo-list.css';\nimport '../../styles/index.css';\nimport '../../styles/filters.css';\n\nconst handleFilter = (event, callFilter, criteria) => {\n  event.preventDefault();\n  callFilter(criteria);\n};\n\nexport const TodoFilter = (props) => {\n  const [todosCompletedCount, settodosCompletedCount] = useState(0);\n  const [isAnyCompleted, setIsAnyCompleted] = useState(0);\n\n  const {\n    todos,\n    filter,\n    onFilter,\n    clearCompleted,\n    showFotter,\n  } = props;\n\n  const filterCompleted = todos\n    .filter(todo => todo.completed === false)\n    .length;\n\n  useEffect(() => {\n    settodosCompletedCount(filterCompleted);\n  }, [filterCompleted]);\n\n  const filterIsAnyCompleted = todos\n    .some(todo => todo.completed === true);\n\n  useEffect(() => {\n    setIsAnyCompleted(filterIsAnyCompleted);\n  }, [filterIsAnyCompleted]);\n\n  return (\n\n    <footer\n      className={\n        classNames({\n          footer: showFotter,\n          hidden: !showFotter,\n        })}\n    >\n      <span className=\"todo-count\">\n        {`${todosCompletedCount}  items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'all') })}\n            onClick={event => handleFilter(event, onFilter, 'all')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'active') })}\n            onClick={event => handleFilter(event, onFilter, 'active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/\"\n            className={classNames({ selected: (filter === 'completed') })}\n            onClick={event => handleFilter(event, onFilter, 'completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {isAnyCompleted && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={clearCompleted}\n        >\n          Clear completed\n        </button>\n      )}\n    </footer>\n  );\n};\n\nTodoFilter.propTypes = {\n  showFotter: PropTypes.bool.isRequired,\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }),\n  ),\n};\n\nTodoFilter.defaultProps = {\n  todos: [],\n};\n","export const userSetUpName = 'Sasha_FE_NOV20';\n\nexport const BASE_URL = 'https://mate-api.herokuapp.com';\n","import { BASE_URL, userSetUpName } from './api';\n\nconst post = (url, data) => {\n  fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\n        `${response.status} ${response.statusText}`,\n      );\n    })\n    .then(result => result.data);\n};\n\nexport const addUser = () => {\n  post('/users', {\n    name: 'Sasha',\n    username: userSetUpName,\n    email: 'mate@example.com',\n    phone: '1234567890',\n  });\n};\n\nexport async function getUserId(userName) {\n  const response = await fetch(`${BASE_URL}/users`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return (result.data.filter(user => (user.username)\n    && user.username.localeCompare(userName) === 0))[0];\n}\n\nexport const removeUser = (todoId) => {\n  fetch(`${BASE_URL}/users/${todoId}`, {\n    method: 'DELETE',\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\n        `${response.status} ${response.statusText}`,\n      );\n    })\n    .then(result => result.data);\n};\n\n// export const addTodo = ({ userId, title }) => {\n//   post('/todos', {\n//     userId,\n//     title,\n//     completed: false,\n//   });\n// };\n","import { BASE_URL } from './api';\n\nexport async function getTodos(userId) {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  const result = await response.json();\n\n  return (result.data.filter(todo => todo.userId === userId));\n}\n\nexport const removeTodo = (todoId) => {\n  fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'DELETE',\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\n        `${response.status} ${response.statusText}`,\n      );\n    })\n    .then(result => result.data);\n};\n\nconst post = (url, data) => {\n  fetch(`${BASE_URL}${url}`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\n        `${response.status} ${response.statusText}`,\n      );\n    })\n    .then(result => result.data);\n};\n\nexport const addTodo = ({ userId, title, completed }) => {\n  post('/todos', {\n    userId,\n    title,\n    completed,\n  });\n};\n\nexport const patch = (todoId, data) => {\n  fetch(`${BASE_URL}/todos/${todoId}`, {\n    method: 'PATCH',\n    body: JSON.stringify(data),\n  })\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error(\n        `${response.status} ${response.statusText}`,\n      );\n    })\n    .then(result => result.data);\n};\n\nexport const completeTodo = ({ completed }) => {\n  patch('/todos', {\n    completed,\n  });\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoApp } from './Component/Header/TodoApp';\nimport { TodoList } from './Component/Main/TodoList';\nimport { TodoFilter } from './Component/Footer/TodosFilter';\n// import { useLocalStorage } from './Component/useLocalState';\nimport * as api from './Component/API/api';\nimport * as apiUsers from './Component/API/users';\nimport * as apiTodos from './Component/API/todos';\n// import * as apiTodos from './Component/API/todos';\nimport './styles/filters.css';\nimport './styles/index.css';\nimport './styles/todo-list.css';\n\nfunction App() {\n  const [items, setItems] = useState([]);\n  const [filter, setFilter] = useState('');\n  const [userId, setUserId] = useState(0);\n  const [userName, setUserName] = useState('');\n  // const [todos, setTodos] = useLocalStorage('todos', []);\n  const [todos, setTodos] = useState([]);\n\n  // useEffect(() => {\n  //   if (localStorage.todos) {\n  //     setTodos(JSON.parse(localStorage.getItem('todos')));\n  //   } else { apiTodos.getTodos()\n  //   .then(setTodos);\n  // }}, []);\n  const loadTodosFromServer = async(userID) => {\n    const result = await apiTodos.getTodos(userID);\n\n    setTodos(result);\n  };\n\n  useEffect(() => {\n    loadTodosFromServer(userId);\n  }, [userId]);\n  const addTodo = async(newTodo) => {\n    await apiTodos.addTodo(newTodo);\n\n    await loadTodosFromServer(userId);\n  };\n\n  useEffect(() => {\n    setItems([...todos]);\n  }, [todos]);\n\n  const onFilter = (comand) => {\n    setFilter(comand);\n    switch (comand) {\n      case 'active':\n\n        return setItems([...todos.filter(todo => todo.completed === false)]);\n\n      case 'completed':\n\n        return setItems([...todos.filter(todo => todo.completed === true)]);\n\n      default:\n\n        return setItems([...todos]);\n    }\n  };\n\n  const clearCompleted = () => {\n    setTodos(todos.filter(todo => !todo.completed));\n  };\n\n  const deleteTodo = (removeTodoID) => {\n    apiTodos.removeTodo(removeTodoID);\n    loadTodosFromServer(userId);\n  };\n\n  const completeTodo = (isCopleted) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === isCopleted) {\n        return {\n          ...todo,\n          completed: !todo.completed,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  const completeAllTodo = (comandAll) => {\n    setTodos(todos.map(todo => ({\n      ...todo,\n      completed: comandAll,\n    })));\n  };\n\n  const onAddNewTitle = (newTitle) => {\n    setTodos(todos.map((todo) => {\n      if (todo.id === newTitle.id) {\n        return {\n          ...todo,\n          title: newTitle.title,\n        };\n      }\n\n      return todo;\n    }));\n  };\n\n  useEffect(() => {\n    apiUsers.getUserId(api.userSetUpName)\n      .then(result => setUserId(result.id));\n  }, []);\n\n  useEffect(() => {\n    apiUsers.getUserId(api.userSetUpName)\n      .then(result => setUserName(result.name));\n  }, []);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n\n        {(!userName) && (\n          <div className=\"conteiner-button\">\n            <button\n              type=\"button\"\n              className=\"button-new\"\n              onClick={() => {\n                apiUsers.addUser();\n              }}\n            >\n              1. ADD USER\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button-new\"\n              onClick={apiUsers.getUserId}\n            >\n              2. GET USERID\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"button-new\"\n              onClick={() => {\n                apiUsers.removeUser(userId);\n              }}\n            >\n              3. removeUSER\n            </button>\n          </div>\n        )}\n\n        {(userName) && (\n          <span\n            className=\"user-name\"\n          >\n            {`name: ${userName}`}\n          </span>\n        )}\n\n        <h1>todos</h1>\n\n        <TodoApp\n          onAdd={addTodo}\n          todos={todos}\n          userId={userId}\n        />\n      </header>\n\n      <section className=\"main\">\n        <TodoList\n          items={items}\n          deleteTodo={deleteTodo}\n          completeTodo={completeTodo}\n          completeAllTodo={completeAllTodo}\n          showFotter={todos.length > 0}\n          onAddNewTitle={onAddNewTitle}\n        />\n      </section>\n\n      <TodoFilter\n        todos={todos}\n        filter={filter}\n        onFilter={onFilter}\n        clearCompleted={clearCompleted}\n        showFotter={todos.length > 0}\n      />\n\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}